# -*- coding: utf-8 -*-
"""Vigenere.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10P-o9CYeSKdgMgnG7rp2fSCx2btIFfUR
"""

def gerar_tabua():
    tabua = {}
    alfabeto = "abcdefghijklmnopqrstuvwxyz"

    # Para cada letra do alfabeto, gera alfabeto deslocado
    for i in range (26):
        letra = alfabeto[i]
        tabua[letra] = alfabeto[i:] + alfabeto[:i]

    return tabua

tabua = gerar_tabua()
print(tabua)

freq_portugues = {
        'a':14.63,
        'b':1.04,
        'c':3.88,
        'd':4.99,
        'e':12.57,
        'f':1.02,
        'g':1.30,
        'h':1.28,
        'i':6.18,
        'j':0.40,
        'k':0.02,
        'l':2.78,
        'm':4.74,
        'n':5.05,
        'o':10.73,
        'p':2.52,
        'q':1.20,
        'r':6.53,
        's':7.81,
        't':4.34,
        'u':4.63,
        'v':1.67,
        'w':0.01,
        'x':0.21,
        'y':0.01,
        'z':0.47,
    }

freq_ingles = { 'a':8.167,
            'b':1.492,
            'c':2.782,
            'd':4.253,
            'e':12.702,
            'f':2.228,
            'g':2.015,
            'h':6.094,
            'i':6.966,
            'j':0.153,
            'k':0.772,
            'l':4.025,
            'm':2.406,
            'n':6.749,
            'o':7.507,
            'p':1.929,
            'q':0.095,
            'r':5.987,
            's':6.327,
            't':9.056,
            'u':2.758,
            'v':0.978,
            'w':2.360,
            'x':0.150,
            'y':1.974,
            'z':0.074,
}

# Por 'frase', denota-se 'texto plano'.

def criptografar(frase, chave):
    # Normalização inicial, deixando todos os caracteres em caixa baixa
    frase = frase.lower()
    chave = chave.lower()

    # Gerando dados iniciais para posterior processamento
    tabua = gerar_tabua()
    tamanho_frase, tamanho_chave = len(frase), len(chave) - 1
    posicao = 0
    texto_cifrado = ""


    for i in range(tamanho_frase):
        # Recomeça o loop quando ultrapassar o tamanho do texto
        if posicao > tamanho_chave:
            posicao = 0

        # Chave
        chave_atual = chave[posicao]
        letra_atual = frase[i]

        if letra_atual != " ":
            letra_cifrada = tabua[chave_atual][(ord(letra_atual) - ord('a'))]
        else:
            letra_cifrada = " "
            posicao -= 1
        texto_cifrado += letra_cifrada

        posicao += 1

    return texto_cifrado

frase = "eu gosto de banana"
chave = "banana"

criptografar(frase, chave)

def descriptografar(frase_cifrada, chave):
    tamanho_frase, tamanho_chave = len(frase_cifrada), len(chave) - 1
    posicao = 0
    texto_decrifrado = ""

    for i in range(tamanho_frase):
        if posicao > tamanho_chave:
            posicao = 0

        letra_atual = frase_cifrada[i]
        chave_atual = chave[posicao]

        if letra_atual != " ":
            letra_real = chr(ord('a') + (tabua[chave_atual].index(letra_atual)))
        else:
            letra_real = " "
            posicao -= 1

        texto_decrifrado += letra_real

        posicao += 1

    return texto_decrifrado

texto_cifrado = 'fu toftp dr bnnbnn'
chave = 'banana'

descriptografar(texto_cifrado, chave)

import matplotlib.pyplot as plt

x = list(freq_portugues.keys())
y = list(freq_portugues.values())

plt.title("Frequência de letras em português")
plt.xlabel("Letras")
plt.ylabel("Frequência")
plt.bar(x, y)
plt.show()

import matplotlib.pyplot as plt

x = list(freq_ingles.keys())
y = list(freq_ingles.values())

plt.title("Frequência de letras em inglês")
plt.xlabel("Letras")
plt.ylabel("Frequência")
plt.bar(x, y)
plt.show()

string = "banana"
string[:len(string) - 1]

def checa_coincidencias(texto1, texto2):
    coincidencias = 0
    len_texto = len(texto1)

    for i in range(len_texto):
        if texto1[i] == texto2[i]:
            coincidencias += 1

    return coincidencias

def len_chave(texto_cifrado):
    len_texto = len(texto_cifrado)
    texto_deslocado = texto_cifrado[:len_texto - 1]
    indice = 1
    coincidencias = []

    for i in range(len_texto - 1):
        coincidencias.append((checa_coincidencias(texto_cifrado[indice:], texto_deslocado)) / len_texto)
        texto_deslocado = texto_deslocado[:-1]
        indice += 1

    return coincidencias

texto_exemplo = "A Russia lancou na madrugada deste domingo o maior bombardeio com drones e misseis da guerra contra a Ucrania matando pelo menos nn pessoas e ferindo dezenas em horas de ataques a cidades e vilarejos por todo o pais disseram autoridades ucranianas O ataque ocorreu mesmo com a realizacao da maior troca de prisioneiros da guerra um raro momento de cooperacao entre ambas as nacoes"
texto_exemplo = texto_exemplo.replace(" ", "")
key = "cachorro"
cifrado = criptografar(texto_exemplo, key)
descriptografado = descriptografar(cifrado, key)
print(cifrado)
print(descriptografado)

def grafico_coincidencias(texto_cifrado):
    x = list(range(len(texto_cifrado) - 1))[:40]
    y = len_chave(texto_cifrado)[:40]

    plt.figure(figsize=(30, 6))
    plt.bar(x, y)
    plt.show()

def cria_caixas(texto_cifrado):
    n = int(input("Digite o tamanho da chave: "))
    rotulos = list(range(n))
    caixas = {}

    for rotulo in rotulos:
        caixas[rotulo] = []

    for i in range(len(cifrado)):
        rotulo = i % n
        caixas[rotulo].append(cifrado[i])

    return caixas

def prepara_caixa(caixa):
    alfabeto = "abcdefghijklmnopqrstuvwxyz"
    map = {}

    for letra in alfabeto:
        map[letra] = 0

    for letra in caixa:
        map[letra] += 1

    x = list(map.keys())
    y = list(map.values())

    return [x, y]

def mostra_caixa(caixas, i):
    caixa = caixas[i]
    x, y = prepara_caixa(caixa)

    plt.figure(figsize=(6, 1))
    plt.title("Frequência de letras na caixa atual")
    plt.xlabel("Letras")
    plt.ylabel("Frequência")
    plt.bar(x, y)
    plt.show()

caixas = cria_caixas(cifrado)
mostra_caixa(caixas, 6)

import matplotlib.pyplot as plt

def grafico_freq_pt():
    freq_portugues = {
        'a':14.63,
        'b':1.04,
        'c':3.88,
        'd':4.99,
        'e':12.57,
        'f':1.02,
        'g':1.30,
        'h':1.28,
        'i':6.18,
        'j':0.40,
        'k':0.02,
        'l':2.78,
        'm':4.74,
        'n':5.05,
        'o':10.73,
        'p':2.52,
        'q':1.20,
        'r':6.53,
        's':7.81,
        't':4.34,
        'u':4.63,
        'v':1.67,
        'w':0.01,
        'x':0.21,
        'y':0.01,
        'z':0.47,
    }

    x = list(freq_portugues.keys())
    y = list(freq_portugues.values())

    plt.figure(figsize=(6, 1))
    plt.title("Frequência de letras em português")
    plt.xlabel("Letras")
    plt.ylabel("Frequência")
    plt.bar(x, y)
    plt.show()

def grafico_freq_en():
    freq_ingles = { 'a':8.167,
                'b':1.492,
                'c':2.782,
                'd':4.253,
                'e':12.702,
                'f':2.228,
                'g':2.015,
                'h':6.094,
                'i':6.966,
                'j':0.153,
                'k':0.772,
                'l':4.025,
                'm':2.406,
                'n':6.749,
                'o':7.507,
                'p':1.929,
                'q':0.095,
                'r':5.987,
                's':6.327,
                't':9.056,
                'u':2.758,
                'v':0.978,
                'w':2.360,
                'x':0.150,
                'y':1.974,
                'z':0.074,
    }

    x = list(freq_portugues.keys())
    y = list(freq_portugues.values())

    plt.figure(figsize=(6, 1))
    plt.title("Frequência de letras em inglês")
    plt.xlabel("Letras")
    plt.ylabel("Frequência")
    plt.bar(x, y)
    plt.show()

def normalizar(lista):
    total = sum(lista)
    lista_normalizada = []

    for valor in lista:
        valor_normalizado = (valor * 100) / total
        lista_normalizada.append(valor_normalizado)

    return lista_normalizada

def deslocar_direita(x, y):
    x1 = x[i:] + x[:i]
    y1 = y[i:] + y[:i]
    return (x1, y1)

def deslocar_esquerda(x, y):
    x1 = x[-i:] + x[:-i]
    y1 = y[-i:] + y[:-i]
    return (x1, y1)

def obtem_letra_chave(caixa):
    x, y = prepara_caixa(caixa)
    print(x)
    print(y)

    y1 = normalizar(y)
    y2 = list(freq_portugues.values())

    menor_erro = [9999, 0]
    erro_atual = [0, 0]

    for i in range(len(y1)):
        erro_atual = [0, i]

        for j in range(len(y1)):
            erro_atual[0] += abs(y1[j] - y2[j])

        if erro_atual[0] < menor_erro[0]:
            menor_erro[0] = erro_atual[0]
            menor_erro[1] = i
        x1, y1 = deslocar_esquerda(x, y)

    return menor_erro



alfabeto = "abcdefghijklmnopqrstuvwxyz"
map = {}
for letra in alfabeto:
    map[letra] = 0

for letra in caixas[0]:
    map[letra] += 1

x = list(map.keys())
y = list(map.values())

x1 = x.copy()
y1 = normalizar(y)
y2 = list(freq_portugues.values())

menor_erro = [9999, 0]
erro_atual = [0, 0]

iteracoes = 0
for i in range(len(y1)):
    erro_atual = [0, i]

    for j in range(len(y1)):
        erro_atual[0] += abs(y1[j] - y2[j])

    if erro_atual[0] < menor_erro[0]:
        menor_erro[0] = erro_atual[0]
        menor_erro[1] = iteracoes

    x, y1 = deslocar_esquerda(x, y1)
    iteracoes += 1

print(menor_erro)

# print(obtem_letra_chave(caixas[6]))

print(caixas)

